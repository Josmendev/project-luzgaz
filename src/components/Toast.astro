---
---

<!-- Toast Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2 max-w-sm"></div>

<script>
  interface ToastOptions {
    message: string;
    type?: 'success' | 'error' | 'info' | 'warning';
    duration?: number;
  }

  class ToastManager {
    private container: HTMLElement;

    constructor() {
      this.container = document.getElementById('toast-container')!;
    }

    show({ message, type = 'info', duration = 4000 }: ToastOptions) {
      const toast = this.createToast(message, type);
      this.container.appendChild(toast);

      // Trigger entrada animation
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
        toast.classList.add('translate-x-0', 'opacity-100');
      }, 10);

      // Auto remove after duration
      setTimeout(() => {
        this.removeToast(toast);
      }, duration);

      // Add click to dismiss
      toast.addEventListener('click', () => {
        this.removeToast(toast);
      });
    }

    private createToast(message: string, type: string): HTMLElement {
      const toast = document.createElement('div');

      const baseClasses = 'transform translate-x-full opacity-0 transition-all duration-300 ease-in-out cursor-pointer';
      const layoutClasses = 'border-l-4 rounded-lg shadow-xl p-4 flex items-start space-x-3 max-w-sm';

      let typeClasses = '';
      let icon = '';

      switch (type) {
        case 'success':
          typeClasses = 'bg-green-100 border-green-500 text-green-800';
          icon = `
            <svg class="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          `;
          break;
        case 'error':
          typeClasses = 'bg-red-100 border-red-500 text-red-800';
          icon = `
            <svg class="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          `;
          break;
        case 'warning':
          typeClasses = 'bg-yellow-100 border-yellow-500 text-yellow-800';
          icon = `
            <svg class="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          `;
          break;
        case 'info':
        default:
          typeClasses = 'bg-blue-100 border-blue-500 text-blue-800';
          icon = `
            <svg class="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          `;
          break;
      }

      toast.className = `${baseClasses} ${layoutClasses} ${typeClasses}`;
      toast.innerHTML = `
        ${icon}
        <div class="flex-1">
          <p class="text-sm font-medium leading-5">${message}</p>
        </div>
        <button class="text-gray-500 hover:text-gray-700 transition-colors duration-200 ml-2 flex-shrink-0">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      `;

      return toast;
    }

    private removeToast(toast: HTMLElement) {
      toast.classList.remove('translate-x-0', 'opacity-100');
      toast.classList.add('translate-x-full', 'opacity-0');

      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }
  }

  // Make toast manager globally available
  declare global {
    interface Window {
      toast: ToastManager;
    }
  }

  // Initialize toast manager when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      window.toast = new ToastManager();
    });
  } else {
    window.toast = new ToastManager();
  }
</script>